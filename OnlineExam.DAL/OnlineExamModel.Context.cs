//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineExam.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using OnlineExam.Model;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OnlineExamEntities : DbContext
    {
        public OnlineExamEntities()
            : base("name=OnlineExamEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<Choice> Choices { get; set; }
        public virtual DbSet<Exam> Exams { get; set; }
        public virtual DbSet<ExamPaper> ExamPapers { get; set; }
        public virtual DbSet<PERMISSION> PERMISSIONS { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<QuestionType> QuestionTypes { get; set; }
        public virtual DbSet<ROLE> ROLES { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<UserAnswer> UserAnswers { get; set; }
        public virtual DbSet<UserExam> UserExams { get; set; }
        public virtual DbSet<USER> USERS { get; set; }
    
        public virtual ObjectResult<uspInsertExam_Result> uspInsertExam(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInsertExam_Result>("uspInsertExam", nameParameter);
        }
    
        public virtual int uspInsetQuestionWithAnswer(Nullable<int> questiontype, Nullable<int> exampaperid, string questiontext, string chioce1, string chioce2, string chioce3, string chioce4, string answer, ObjectParameter qUESTIONID)
        {
            var questiontypeParameter = questiontype.HasValue ?
                new ObjectParameter("questiontype", questiontype) :
                new ObjectParameter("questiontype", typeof(int));
    
            var exampaperidParameter = exampaperid.HasValue ?
                new ObjectParameter("exampaperid", exampaperid) :
                new ObjectParameter("exampaperid", typeof(int));
    
            var questiontextParameter = questiontext != null ?
                new ObjectParameter("questiontext", questiontext) :
                new ObjectParameter("questiontext", typeof(string));
    
            var chioce1Parameter = chioce1 != null ?
                new ObjectParameter("chioce1", chioce1) :
                new ObjectParameter("chioce1", typeof(string));
    
            var chioce2Parameter = chioce2 != null ?
                new ObjectParameter("chioce2", chioce2) :
                new ObjectParameter("chioce2", typeof(string));
    
            var chioce3Parameter = chioce3 != null ?
                new ObjectParameter("chioce3", chioce3) :
                new ObjectParameter("chioce3", typeof(string));
    
            var chioce4Parameter = chioce4 != null ?
                new ObjectParameter("chioce4", chioce4) :
                new ObjectParameter("chioce4", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("answer", answer) :
                new ObjectParameter("answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsetQuestionWithAnswer", questiontypeParameter, exampaperidParameter, questiontextParameter, chioce1Parameter, chioce2Parameter, chioce3Parameter, chioce4Parameter, answerParameter, qUESTIONID);
        }
    
        public virtual ObjectResult<uspgetQuestionsByExamPaperId_Result> uspgetQuestionsByExamPaperId(Nullable<int> exampaperid)
        {
            var exampaperidParameter = exampaperid.HasValue ?
                new ObjectParameter("exampaperid", exampaperid) :
                new ObjectParameter("exampaperid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspgetQuestionsByExamPaperId_Result>("uspgetQuestionsByExamPaperId", exampaperidParameter);
        }
    
        public virtual ObjectResult<uspgetQuestionsByExamPaperId_Result> uspgetQuestionsByExamPaperId1(Nullable<int> exampaperid)
        {
            var exampaperidParameter = exampaperid.HasValue ?
                new ObjectParameter("exampaperid", exampaperid) :
                new ObjectParameter("exampaperid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspgetQuestionsByExamPaperId_Result>("uspgetQuestionsByExamPaperId1", exampaperidParameter);
        }
    
        public virtual int uspInsertUserAnswer(Nullable<int> userid, Nullable<int> questionid, Nullable<int> choiceid, Nullable<int> exampaperid, ObjectParameter uSERANSWERID)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var questionidParameter = questionid.HasValue ?
                new ObjectParameter("questionid", questionid) :
                new ObjectParameter("questionid", typeof(int));
    
            var choiceidParameter = choiceid.HasValue ?
                new ObjectParameter("choiceid", choiceid) :
                new ObjectParameter("choiceid", typeof(int));
    
            var exampaperidParameter = exampaperid.HasValue ?
                new ObjectParameter("exampaperid", exampaperid) :
                new ObjectParameter("exampaperid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertUserAnswer", useridParameter, questionidParameter, choiceidParameter, exampaperidParameter, uSERANSWERID);
        }
    
        public virtual int uspUpdateUserAnswerById(Nullable<int> useranswerid, Nullable<int> choiceid)
        {
            var useransweridParameter = useranswerid.HasValue ?
                new ObjectParameter("useranswerid", useranswerid) :
                new ObjectParameter("useranswerid", typeof(int));
    
            var choiceidParameter = choiceid.HasValue ?
                new ObjectParameter("choiceid", choiceid) :
                new ObjectParameter("choiceid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateUserAnswerById", useransweridParameter, choiceidParameter);
        }
    }
}
